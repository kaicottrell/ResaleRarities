@using ApplicationCore.Models
@using ApplicationCore.Interfaces
@using Microsoft.AspNetCore.Components
@using Infrastructure.Services
@using Blazorise
@using Blazorise.Components

<div class="custom-modal-wrapper my-3">
    @if (IsDataLoaded)
    {
        <div class="custom-modal">
            <div class="modal-content">
                <EditForm Model="Product" OnValidSubmit="AddProduct">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <h3>@(ProductId == null ? "Add" : "Edit") Product</h3>
                    <div class="form-group">
                        <label>Pictures</label>
                        <div class="scrollable-container">
                            <Carousel @bind-SelectedSlide="@selectedSlide" ShowIndicators="false" Autoplay="false">
                                @foreach (var image in Images)
                                {
                                    <CarouselSlide Name="@image.Id">
                                        <Image Source="@($"data:image;base64,{Convert.ToBase64String(image.ImageData)}")" Width="Width.Is100" />
                                    </CarouselSlide>
                                }
                            </Carousel>
                        </div>
                        <button type="button" class="btn btn-primary" @onclick="ShowPictureOptions">Add Pictures</button>
                    </div>


                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input id="productName" class="form-control" @bind="Product.Name" />
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-group">
                        <label for="productDescription">Product Description</label>
                        <textarea id="productDescription" class="form-control" @bind="Product.Description" rows="4"></textarea>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>

                    <div class="form-group">
                        <label for="productCondition">Condition</label>
                        <select id="productCondition" class="form-control" @bind="Product.ConditionId">
                            <optgroup label="Select a Condition">
                                <option value="0" disabled selected hidden>Select a Condition</option>
                            </optgroup>
                            @foreach (var condition in ConditionList)
                            {
                                <option value="@condition.Id">@condition.Type</option>
                            }
                        </select>

                    </div>
                    <div class="form-group">
                        <label for="productCategory">Category</label>
                        <select id="productCategory" class="form-control" @bind="Product.CategoryId">
                            <optgroup label="Select a Category">
                                <option value="0" disabled selected hidden>Select a Category</option>
                            </optgroup>
                            @foreach (var category in CategoryList)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>

                    </div>

                    <div class="form-group text-center mt-3">
                        @if (Images.Any() || !string.IsNullOrEmpty(Product.Name) || !string.IsNullOrEmpty(Product.Description))
                        {
                            <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        }

                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p>Loading...</p>
        </div>
    }
</div>

@if (ShowPictureOptionsModal)
{
    <div class="custom-modal-wrapper">
        <div class="custom-modal">
            <div class="modal-content">
                <!-- Picture options modal content -->
                <h3>Add Pictures</h3>
                <button type="button" class="btn btn-primary" @onclick="CaptureAndUploadImage">Capture Image</button>
                <button type="button" class="btn btn-primary" @onclick="UploadExistingImage">Upload Image</button>
                <button type="button" class="btn btn-danger" @onclick="ClosePictureOptions">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ListingId { get; set; }

    [Parameter]
    public string? ProductId { get; set; }
    [Parameter]
    public EventCallback OnProductAdded { get; set; }
    [Parameter]
    public EventCallback ClosedProductModal { get; set; }

    private Product Product { get; set; } = new Product();
    private IEnumerable<Category> CategoryList { get; set; } = new List<Category>();

    private IEnumerable<ApplicationCore.Models.Condition> ConditionList { get; set; } = new List<ApplicationCore.Models.Condition>();

    [Inject]
    private IUnitofWork? _unitOfWork { get; set; }
    private IEnumerable<RareImage> Images { get; set; } = new List<RareImage>();
    private bool ShowPictureOptionsModal { get; set; } = false;
    private string selectedSlide { get; set; } = "";
    private bool IsDataLoaded { get; set; } = false;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        IsDataLoaded = false;
        StateHasChanged();
        // Load categories and conditions
        CategoryList = _unitOfWork.Category.List();
        ConditionList = _unitOfWork.Condition.List();

        if (ProductId != null)
        {
            LoadExistingProduct();
        }
        else
        {
            SetUpNewProduct();
        }

        IsDataLoaded = true;
        StateHasChanged();
    }

    private void LoadExistingProduct()
    {
        Product = _unitOfWork!.Product.Get(p => p.Id == ProductId);
        Images = _unitOfWork.Image.List(image => image.ProductId == Product.Id);
        selectedSlide = Images.FirstOrDefault()?.Id ?? "";
    }

    private void SetUpNewProduct()
    {
        Product.ListingId = ListingId;
        _unitOfWork!.Product.Add(Product);
        _unitOfWork.Commit();
    }

    private async Task AddProduct()
    {
        if (Product.CategoryId == 0)
        {
            Product.CategoryId = null;
        }
        if (Product.ConditionId == 0)
        {
            Product.ConditionId = null;
        }

        _unitOfWork.Product.Update(Product);
        _unitOfWork.Commit();
        await OnProductAdded.InvokeAsync(); // Notify the parent component
        Product = new Product(); // Ensure that we have a fresh product
        Images = new List<RareImage>(); // fresh list of images
        selectedSlide = "";
    }

    private async Task CaptureAndUploadImage()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult myPhoto = await MediaPicker.Default.CapturePhotoAsync();
            await SavePhoto(myPhoto);
            ClosePictureOptions();
        }
        else
        {
            await Shell.Current.DisplayAlert("OOPS", "Your device is not supported", "Ok");
        }
    }

    private async Task UploadExistingImage()
    {
        //Load photo
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult myPhoto = await MediaPicker.Default.PickPhotoAsync();
            await SavePhoto(myPhoto);
            ClosePictureOptions();
            // Trigger a state change to update the UI
        }
        else
        {
            await Shell.Current.DisplayAlert("OOPS", "Your device is not supported", "Ok");
        }
    }

    async Task<byte[]> ConvertFileResultToBytes(FileResult fileResult)
    {
        try
        {
            using (var memoryStream = new MemoryStream())
            {
                using (var stream = await fileResult.OpenReadAsync())
                {
                    await stream.CopyToAsync(memoryStream);
                }
                return memoryStream.ToArray();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error converting FileResult to bytes: {ex.Message}");
            return null;
        }
    }

    private void Delete()
    {
        if (Product != null)
        {
            _unitOfWork.Product.Delete(Product);
            _unitOfWork.Commit();
        }
        ClosedProductModal.InvokeAsync(false); // Hide modal
    }

    private void ClosePictureOptions()
    {
        ShowPictureOptionsModal = false;
    }

    private void ShowPictureOptions()
    {
        ShowPictureOptionsModal = true;
    }

    private async Task SavePhoto(FileResult myPhoto)
    {
        if (myPhoto != null)
        {
            // Convert the photo to a byte array
            byte[] imageBytes = await ConvertFileResultToBytes(myPhoto);
            if (imageBytes != null)
            {
                // Save the image captured in the database
                var capturedImage = new RareImage
                    {
                        ImageData = imageBytes,
                        ProductId = Product.Id,
                    };

                var imagesList = Images.ToList();
                imagesList.Add(capturedImage);

                _unitOfWork.Image.AddAsync(capturedImage);
                Images = imagesList;

                selectedSlide = Images.FirstOrDefault()?.Id ?? "";

                _unitOfWork.Commit();
                // Proceed with saving the captured image in the database
            }
            else
            {
                // Handle error
            }
        }
    }
}
