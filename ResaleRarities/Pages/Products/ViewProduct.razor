@using ApplicationCore.Models
@using ApplicationCore.Interfaces
@using ResaleRarities.Pages.Products
@using Infrastructure.Utility;
@using Infrastructure.Services;
@using Microsoft.AspNetCore.Components.Authorization
@using ResaleRarities.Authentication
@using System.Security.Claims
@using Blazorise
@using Blazorise.Components

@inject NotificationService NotificationService
@inject AuthenticationStateProvider authStateProvider

@if(IsDataLoaded)
{
    <div class="container d-flex justify-content-center">
        <div class="listing-card col-12 col-md-9">
            <div class="d-flex justify-content-center">
                <button class="close-button" @onclick="CloseProductView">X</button> <!-- Close button -->
                @{
                    <Carousel class="m-4 " @bind-SelectedSlide="@selectedSlide" Autoplay="false" ShowIndicators="false">
                        @foreach (var image in Images)
                        {
                            <CarouselSlide Name="@image.Id">
                                <Image Source="@($"data:image;base64,{Convert.ToBase64String(image.ImageData)}")" class="carousel-image" style="max-width:600px; max-height: 300px;" />
                            </CarouselSlide>
                        }
                    </Carousel>

                }

             </div>
            
            <div class="text-center">@_productObj.Name</div>
            <p>Description: @_productObj.Description</p>
            <p>Condition: @(_productObj.Condition?.Type ?? "Not Listed")</p>
            <p>Category: @(_productObj.Category?.Name ?? "Not Listed")</p>

            @if (!IsCreator)
            {
                <button type="submit" class="btn btn-primary">Place Bid</button>
            }
        </div>
    </div>
    
}
else
{
    <!-- Show a spinner while data is loading -->
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}

@code {
    [Inject]
    private IUnitofWork? _unitofWork { get; set; }
    private Product _productObj { get; set; }
    private IEnumerable<RareImage> Images { get; set; } = new List<RareImage>();
    private bool IsCreator { get; set; } = false;
    private string selectedSlide { get; set; } = "";
    private bool IsDataLoaded { get; set; } = false;

    [Parameter]
    public Product ViewedProduct
    {
        get => _productObj;
        set
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(ViewedProduct), "ProductObj parameter is required.");
            }
            _productObj = value;
        }
    }
    [Parameter]
    public EventCallback ClosedProductView { get; set; }

    protected async override void OnInitialized()
    {
        IsDataLoaded = false;
        //Establish if the user is the creator of the Product Listing
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.FindFirst(ClaimTypes.Email).Value;
        var user = _unitofWork.ApplicationUser.Get(u => u.Email == userName);

        var associatedListing = _unitofWork.Listing.Get(listing => listing.Id == _productObj.ListingId, false, "ApplicationUser");
        IsCreator = associatedListing.ApplicationUserId == user.Id;

        //Gather the images associated with the product
        Images = _unitofWork.Image.List(image => image.ProductId == _productObj.Id);

        selectedSlide = Images.FirstOrDefault().Id;
        IsDataLoaded = true;
        StateHasChanged();
    }
    private async Task CloseProductView()
    {
        await ClosedProductView.InvokeAsync();
    }

}
