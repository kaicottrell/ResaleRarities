@using Microsoft.AspNetCore.Components.Authorization
@using Infrastructure.Services;
@inject NotificationService NotificationService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(MauiProgram).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.MainLayout)">
                <NotAuthorized>
                    You are not authorized
                </NotAuthorized>
                <Authorizing>
                    Please wait...
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(Layout.MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="overlay @overlayClass"></div>
    <div class="notification @notificationClass">
        @notificationMessage
    </div>
}

@code {
    private string notificationMessage = "";
    private bool showNotification = false;
    private string overlayClass = "";
    private string notificationClass = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NotificationService.OnShowNotification += ShowNotification;
        }
    }

    private async void ShowNotification(string message, string type)
    {
        notificationMessage = message;
        showNotification = true;
        notificationClass = type == "success" ? "success" : "error"; // Set class based on notification type
        overlayClass = "show-overlay"; // Show the overlay
        StateHasChanged();

        // Hide the notification after 2 seconds
        await Task.Delay(2000);

        notificationClass = $"{notificationClass} fade-out"; // Add fade-out class to trigger the animation
        StateHasChanged();

        await Task.Delay(500); // Wait for the animation to complete

        showNotification = false;
        overlayClass = ""; // Hide the overlay
        notificationMessage = ""; // Clear the notification message
        StateHasChanged(); // Notify Blazor of the state change
    }


}